1.10 Introduction to expressions

Consider the follow statements:

// five() is a function that returns the value 5
int five()
{
    return 5;
}

int main()
{
    int a{ 2 };             // initialize variable a with literal value 2
    int b{ 2 + 3 };         // initialize variable b with computed value 5
    int c{ (2 * 3) + 4 };   // initialize variable c with computed value 10
    int d{ b };             // initialize variable d with variable value 5
    int e{ five() };        // initialize variable e with function return value 5

    return 0;
}

An expression is a non empty sequence of literals, variables, operators and function calls that calculate a value.

The process of executing an expression is evaluation.



The C++ result of an expression os one of the following:
- value
- object or a function
- nothing


When an expression is evaluated each of th terms inside the expression is valuated until a single value remains.


Literals eval to their own values. Variables eval to the value of the variable. operators use their operands to eval some other value.
Functions eval to the return value

Expressions involving operators with side effects are a little tricky, x = 5 evals to x, 

Whenever a single value is used you can use an expression

expressions don't end in colons and cannot compile by themselves


type idenfitifier {expression}

Expression Statements
Certain expressions are used primarly for their side effects rather than they value they produce

However, we mentioned above the expressions cannot be executed by themselves, they  must exist as a part of a statement., we can also make expression statements taht compule but have no effect, just add a semilconon to the end

Subexpressions, full expressions, and compound expressions:
conside rthe following expressions:
2
2 + 3
x = 4 + 5


Simplifying a bit, a subexpression is an expression used as an operand, for example the subexpressions of x = 4 + 5 are x and 4+5. The subexpressions of 4 + 5 are 4 and 5



Quiz time

Question #1


What is the difference between a statement and an expression?

Statements are used when we want the program to perform an action. Expressions are used when we want the program to calculate a value.

Question #2

Indicate whether each of the following lines are statements that do not contain expressions, statements that contain expressions, or are expression statements.

a)

int x;

Statement does not contain an expression. This is a variable definition statement. x is not an expression in this context because it is being defined, not evaluated.

b)

int x = 5;

Statement contains an expression. int x is a variable definition. The = is part of the syntax for copy initialization. The initializer to the right of the equals sign is an expression.

c)

x = 5;

Expression statement. x = 5 is a call to operator= with two operands: x and 5. The semicolon makes it an expression statement.

d) Extra credit:

foo(); // foo is a function

Function calls are part of an expression, so this is an expression statement.

e) Extra credit:

std::cout << x; // Hint: operator<< is a binary operator.

operator<< is a binary operator, so std::cout must be the left-hand operand, and x must be the right-hand operand. Since thatâ€™s the entire statement, this must be an expression statement.
