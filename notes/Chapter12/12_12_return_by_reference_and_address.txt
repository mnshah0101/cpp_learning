12.12 — Return by reference and return by address


Return by reference


Return by reference returns a reference that is bound to the object being returned which avoids making a copy of the return value. To return by reference, we simply define the return value of the function to be a reference type:

The object being returned by reference must exist after the function returns

the programmer must ensure this

Lifetime extension doesn’t work across function boundaries

Don’t return non-const static local variables by reference since they are difficult to keep track of

Assigning/initializing a normal variable with a returned reference makes a copy

If a function returns a reference, and that reference is used to initialize or assign to a non-reference variable, the return value will be copied (as if it had been returned by value).



It’s okay to return reference parameters by reference



It’s okay for an rvalue passed by const reference to be returned by const reference

It’s okay for an rvalue passed by const reference to be returned by const reference

rvalues arent distroyed till the end of their expression

This is because rvalues are not destroyed until the end of the full expression in which they are created. so your object will be created and then the r value destroyed

The caller can modify values through the reference




Return by address

Return by address works almost identically to return by reference, except a pointer to an object is returned instead of a reference to an object. Return by address has the same primary caveat as return by reference -- the object being returned by address must outlive the scope of the function returning the address, otherwise the caller will receive a dangling pointer.

The major advantage of return by address over return by reference is that we can have the function return nullptr if there is no valid object to return. For example, let’s say we have a list of students that we want to search. If we find the student we are looking for in the list, we can return a pointer to the object representing the matching student. If we don’t find any students matching, we can return nullptr to indicate a matching student object was not found.

The major disadvantage of return by address is that the caller has to remember to do a nullptr check before dereferencing the return value, otherwise a null pointer dereference may occur and undefined behavior will result. Because of this danger, return by reference should be preferred over return by address unless the ability to return “no object” is needed.
