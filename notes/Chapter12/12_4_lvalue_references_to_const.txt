12.4 â€” Lvalue references to const



Lvalue reference to const,
when we use the const kewyord when declaring an lvalue reference, we tell the lvalue reference to treat the object it is referencing as a const, 


Because lvalue references to const treat the object they are referencing as const, they can be used to access but not modify the value being referenced:

Initializing an lvalue reference to const with a modifiable lvalue

Lvalue references to const can also bind to modifiable lvalues. In such a case, the object being referenced is treated as const when accessed through the reference (even though the underlying object is non-const):

Initializing an lvalue reference to const with an rvalue

Perhaps surprisingly, lvalues references to const can also bind to rvalues:

When this happens a temporary object is created and initalized with an r value  and the reference to const is bound to that temporary object


Initializing an lvalue reference to const with a value of a different type

Lvalue references to const can even bind to values of different type, as long as they can be implicitly convaerted to the reference type


If you try to bind a const lvalue reference to a value of a different type, the compiler will create a temporary object of the same type as the reference, initialize it using the value, and then bind the reference to the temporary.

Const references bound to temporary objects extend the lifetime of the temporary object

Temporary objects are normally destroyed at the end of the expression
To avoid danging references, the lifetime of the temporary object is extended to match the lifetime of the reference
Destroyed when they both go out of scope


Constexpr lvalue references, it allows the reference to be used in constant expression

They can only be bound to static duration, since the compiler knows where static objects will be instantiated in memory, so it can treat that address as a compile time constant

A constexpr reference cannot bind to a (non-static) local variable. This is because the address of local variables is not known until the function they are defined within is actually called.

When defining a constexpr reference to a const variable, we need to apply both constexpr (which applies to the reference) and const (which applies to the type being referenced).

