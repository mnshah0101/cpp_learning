15.2 â€” Classes and header files


C++ allows us to seperate declartion portion of class from the implementation by defineing member fnuctions outside the class definition

 member functions can be defined outside the class definition just like the non-member functions

 the only difference is we use scope resolution operator Date::


 Note that we left the access functions defined inside the class definition. Because access functions are typically only one line, defining these functions inside the class definition adds minimal clutter, whereas moving them outside the class definition would result in many extra lines of code. For this reason, the definitions of access functions (and other trivial, one-line functions) are often left inside the class definition.

Putting Class Definitions in a header files
class definitions can be put in ehader files and included in any other files that want to use the class type


the compiler needs to see the full defiition of a class for the type to be used, since it needs to calculate size, header files contain full definiition


Naming your class header and code files
- break into cpp and .h

#ifndef DATE_H
#define DATE_H

class Date
{
private:
    int m_year{};
    int m_month{};
    int m_day{};

public:
    Date(int year, int month, int day);

    void print() const;

    int getYear() const { return m_year; }
    int getMonth() const { return m_month; }
    int getDay() const { return m_day; }
};

#endif

#include "Date.h"

Date::Date(int year, int month, int day) // constructor definition
    : m_year{ year }
    , m_month{ month }
    , m_day{ day }
{
}

void Date::print() const // print function definition
{
    std::cout << "Date(" << m_year << ", " << m_month << ", " << m_day << ")\n";
};


we need to compile .cpp with the .h so it is accesible for function calls
Prefer to define non-trivial member functions in a source file with the same name as the class.



Dpesnt defining a class in header file violate ODR if included many times

- types are exempt frmo ODR
- including a class definition more than once in same translation unit is an ODR violation, so we can use #pragram once



Inline member functions
Member functions defined inside class are Inline
Member functions defined outside are not inline and are subject to one definition per program
This is why they are generally done in code file


So why not put everyting in header
- clutters class deefinition
- recompile everything when you make change

Ok for
- for small class ony used one code file you can just do in header file
- if only small number of non-trivial that wont change
- header only files are popular for distribuution

for template classes, almost always in the same file since the compiler needs to see the full template definition to instantiate it


Default arguments for member functions

because member functions are always declared as part of class definition, put it there


Libraries
- most include h and precompiled binaries