11.7 Function template instantiation


Using a function template

Function templates are not actually Functions
their code isnt compiled or ran,
they only generate function

When the compiler encounters the function call, it will determine the function definition doesn't exist,  and it will use max<T> function template to create one

The process of creating one is called function template instantiation, and when it is instantiated due to a function call, its called implicit instantiation.


It is texchnically called a specialization but we call it a function instance, the template is called the primary template


Template argument deduction:
in most cases, the actual type we want to use for instiation will match the type of our function parameters

In cases where the type of the arguments match the actual type we want, we do not need to specify the actual type -- instead, we can use template argument deduction to have the compiler deduce the actual type that should be used from the argument types in the function call.

instead of like this: std::cout << max<int>(1, 2) << '\n'; // specifying we want to call max<int>

we can do this:
std::cout << max<>(1, 2) << '\n';
std::cout << max(1, 2) << '\n';

In either case, the compiler will see that we haven't provided an actual type so it will try to deduce an actual type
The difference between the two cases is how the compiler resolves


with empty brackets, the compiler will only consider max<int>
in the bottom case it will try template function overloads and max non-template function overloads
non template is preferred

Note how the syntax in the bottom case looks identical to a normal function call! In most cases, this normal function call syntax will be the one we use to call functions instantiated from a function template.


Itâ€™s possible to create function templates that have both template parameters and non-template parameters. The type template parameters can be matched to any type, and the non-template parameters work like the parameters of normal functions.

Template function instantiation will not always compile unless used properly


Instantiated functions may not always make sense semantically

The compiler will successfully compile an instantiated function template as long as it makes sense syntactically. However, the compiler does not have any way to check that such a function actually makes sense semantically.

Just like normal functions, function templates can have default arguments for non-template parameters. Each function instantiated from the template will use the same default argument.


Beware function templates with modifiable static local variables

When a static local variable is used in a function template, each function instantiated from that template will have a separate version of the static local variable. This is rarely a problem if the static local variable is const. But if the static local variable is one that is modified, the results may not be as expected.

This is called generic type
